# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="agnoster"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	git
	zsh-autosuggestions
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"
# export PATH=/home/mart/.bin:$PATH

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
alias la="ls -ah"
alias ll="ls -lh"
alias lla="ls -lah"
alias llf="ls -alh | fzf"
alias nv="nvim"
alias snv="sudoedit" # Edit files with sudo nvim while preserving configs
alias cm="chezmoi"
alias cme="chezmoi edit"
alias checkhist="history | grep -e 'pacman -S\s' -e 'pacman -R\s' -e 'yay -S\s' -e 'yay -R\s' | tail -n 50 > ~/history_installed"
alias ednv="cd $HOME/.config/nvim/ && nv ."
alias edqa="cd $HOME/Projects/quickarch && nv ."
alias Y2025="echo 'The year of the linux desktop'"

# xdg-mime aliases to make querying and setting default apps by filetype easier
alias xqf="xdg-mime query filetype" # Queries the xdg name of a filetype e.g. image/png
alias xqd="xdg-mime query default" # Queries the default application for a filetype
alias xsd="xdg-mime default" # Sets the default app. Should have the form xsd app.desktop example/extension e.g. xsd feh.desktop image/png

# Set less as manpager, and theme it with dracula
#location of less choose or modify depending on your system
export MANPAGER="/usr/bin/less -s -M +Gg" 		#standard linux

#man-page colors
export LESS_TERMCAP_mb=$'\e[1;31m'      # begin bold
export LESS_TERMCAP_md=$'\e[1;34m'      # begin blink
export LESS_TERMCAP_so=$'\e[01;45;37m'  # begin reverse video
export LESS_TERMCAP_us=$'\e[01;36m'     # begin underline
export LESS_TERMCAP_me=$'\e[0m'         # reset bold/blink
export LESS_TERMCAP_se=$'\e[0m'         # reset reverse video
export LESS_TERMCAP_ue=$'\e[0m'         # reset underline
export GROFF_NO_SGR=1                   # for konsole

bindkey '^H' backward-kill-word
bindkey '5~' kill-word

# Source lfcd.sh so that working directory of shell changes to working directory of lf on lf exit
LFCD="$HOME/.config/lf/lfcd.sh"
if [ -f "$LFCD" ]; then
	source "$LFCD"
fi

# lfcd.sh script allows for changing the working directory on exit. aliasing it to lf
alias lf="lfcd"

# pnpm
export PNPM_HOME="/home/$(whoami)/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

swap () {
	mv "$1" "$1.temp" && mv "$2" "$1" && mv "$1.temp" "$2";
}

remind() {
	local COUNT="$#"
	local COMMAND="$1"

	# Display help if no parameters or help command
	if [[ $COUNT -eq 0 || "$COMMAND" == "help" || "$COMMAND" == "--help" || "$COMMAND" == "-h" ]]; then
		echo "COMMAND"
		echo "		remind <message> <time>"
		echo "		remind <command>"
		echo
		echo "DESCRIPTION"
		echo "		Displays notification at specified time"
		echo
		echo "EXAMPLES"
		echo '		remind "Hi there" now'
		echo '		remind "Time to make dinner" in 5 minutes'
		echo '		remind "Take a break" in 1 hour'
		echo '		remind "Are you ready?" at noon'
		echo '		remind "Dinner" at 16:00'
		echo '		remind "Meeting" at 1130'
		echo '		remind list'
		echo '		remind clear'
		echo '		remind help'
		echo
		return
	fi

	# Check presence of AT command
	if ! which at > /dev/null; then
		echo "remind: AT utility is required but not installed on your system. Install it with your package manager of choice, for example 'sudo pacman -S at'."
		return
	fi

	# Run commands: list, clear
	if [[ COUNT -eq 1 ]]; then
		if [[ "$COMMAND" == "list" ]]; then
			# at -l
			# atq | awk '{print $1}' | xargs -I{} at -c {} | grep notify-send
			atq | while read -r job_id day month num time rest; do
				message=$(at -c "$job_id" | grep notify-send | sed -E "s/notify-send '(.*)' 'Reminder' -u critical/\1/")
				date_str=$(LC_ALL=C date -d "$day $month $num $time $year" + "%Y-%m-%d %H:%M:%S" 2>/dev/null)
				printf "%s %s - %s\n" "$day" "$time" "$message"
			done | sort
		elif [[ "$COMMAND" == "clear" ]]; then
			at -r $(atq | cut -f1)
		else
			echo "remind: unknown command $COMMAND. Type 'remind' without any parameters to see syntax."
		fi
		return
	fi

	# Ensure enough arguments are provided before shifting
	if [[ COUNT -lt 2 ]]; then
		echo "remind: missing arguments. Type 'remind help' for usage."
		return
	fi

	local MESSAGE="$1"
	local OP="$2"
	shift 2
	local WHEN="$@"

	# Determine time of notification
	if [[ "$OP" == "in" ]]; then
		local TIME="now + $WHEN"
	elif [[ "$OP" == "at" ]]; then
		local TIME="$WHEN"
	elif [[ "$OP" == "now" ]]; then
		local TIME="now"
	else
		echo "remind: invalid time operator $OP"
		return
	fi

	# Schedule the notification
	echo "notify-send '$MESSAGE' 'Reminder' -u critical" | at $TIME 2>/dev/null
	echo "Notification scheduled at ${TIME}"
}

# export arduino-cli config file path (XDG_CONFIG_HOME)
export ARDUINO_CLI_CONFIG_FILE="/home/$(whoami)/.config/arduino-cli/arduino-cli.yaml"

check_last_update.sh
